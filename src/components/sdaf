<template>

<div class="calculator">
    
    <div class="display">{{display}}</div>
    <div @click="clear" class="btn">AC</div>
    <div @click="sign" class="btn">+/-</div>
    <div @click="percent" class="btn">%</div>
    <div @click="divide" class="btn operator">รท</div>
    <div @click="append('7')" class="btn">7</div>
    <div @click="append('8')" class="btn">8</div>
    <div @click="append('9')" class="btn">9</div>
    <div @click="multiply" class="btn operator">ร</div>
    <div @click="append('4')" class="btn">4</div>
    <div @click="append('5')" class="btn">5</div>
    <div @click="append('6')" class="btn">6</div>
    <div @click="subtract" class="btn operator">-</div>
    <div @click="append('1')" class="btn">1</div>
    <div @click="append('2')" class="btn">2</div>
    <div @click="append('3')" class="btn">3</div>
    <div @click="add" class="btn operator">+</div>
    <div @click="append('0')" class="btn zero">0</div>
    <div @click="decimal" class="btn">.</div>
    <div @click="equal" class="btn operator">=</div>
</div>
</template>

<script>
export default {
    name: "Display",
    data(){
        return{
        previous: null,
        display: '',
        operator: null,
        operatorClicked: false,
        }
    },
    methods:{
        clear(){
            this.display = '';
            this.previous = null;
        },
        sign(){
            this.display = this.display.charAt(0) === '-' ? this.display.slice(1) : `-${this.display}`;
        },
        percent(){
            this.display = `${parseFloat(this.display) / 100}`
        },
        append(number){
            if(this.operatorClicked){
                this.display = '';
                this.operatorClicked = false;
            }
            this.display = `${this.display}${number}`;
        },
        decimal(){
            //this function only appends '.' if it hasn't shown before
            //also can use this.display.includes('.')
            if(this.display.indexOf('.') === -1){
                this.append('.')
            }
        },
        setPrevious(){
            this.previous = this.display;
            this.operatorClicked = true;
        },
        divide(){
            this.operator = (a,b) => a/b;
            this.setPrevious();
        },
        multiply(){
            this.operator = (a,b) => a*b;
            this.setPrevious();
        },
        subtract(){
            this.operator = (a,b) => a-b;
            this.setPrevious();
        },
        add(){
            this.operator = (a,b) => a+b;
            this.setPrevious();
        },
        equal(){
            if(this.previous !== null) {
            this.display = `${this.operator(parseFloat(this.previous), parseFloat(this.current))}`;
            this.previous = null;
            }
        }
    }
}
</script>